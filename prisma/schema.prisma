generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sid    String   @id @db.VarChar(255)
  expire DateTime @db.Timestamp(6)
  sess   Json     @db.Json
}

model User {
  email     String   @unique
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  password  String
  type      Type
  updatedAt DateTime @updatedAt
  username  String?  @unique
  imageUrl  String?
  tokens    Token[]
}

model Admin {
  createdAt DateTime  @default(now())
  email     String    @unique
  id        String    @id @default(nanoid())
  role      String    @default("viewer")
  updatedAt DateTime  @updatedAt
  username  String?   @unique
  verified  Boolean   @default(false)
  password  String
  imageUrl  String?
  teachers  Teacher[]
}

model Teacher {
  firstName       String?
  lastName        String?
  verified        Boolean  @default(false)
  adminId         String?
  createdAt       DateTime @default(now())
  email           String   @unique
  id              String   @id @default(nanoid())
  updatedAt       DateTime @updatedAt
  username        String?  @unique
  verifiedTeacher Boolean  @default(false)
  password        String
  imageUrl        String?
  bio             String?
  courses         Course[]
  admin           Admin?   @relation(fields: [adminId], references: [id])
}

model Student {
  firstName       String?
  lastName        String?
  createdAt       DateTime          @default(now())
  email           String            @unique
  id              String            @id @default(nanoid())
  updatedAt       DateTime          @updatedAt
  username        String?           @unique
  password        String
  imageUrl        String?
  verified        Boolean           @default(false)
  Chapter         Chapter[]
  rating          Rating[]
  progress        StudentProgress[]
  enrolledCourses Course[]          @relation("CourseToStudent")
}

model Token {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Course {
  id           String    @id @default(nanoid())
  title        String
  type         String
  limit        Int
  view         String    @default("basic")
  teacherId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  banner       String?
  price        Int
  categoryName String?
  isFeatured   Boolean   @default(false)
  isPublished  Boolean   @default(false)
  description  String?
  chapters     Chapter[]
  category     Category? @relation(fields: [categoryName], references: [name])
  teacher      Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  ratings      Rating[]
  participants Student[] @relation("CourseToStudent")
}

model Rating {
  id        String  @id @default(uuid())
  rating    Int?
  content   String
  studentId String
  courseId  String?
  Course    Course? @relation(fields: [courseId], references: [id])
  reviewer  Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id              String            @id @default(uuid())
  title           String
  videoUrl        String?
  position        Int
  isPublished     Boolean           @default(false)
  isFree          Boolean           @default(false)
  courseId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  studentId       String?
  description     Json?
  html            String?
  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Student         Student?          @relation(fields: [studentId], references: [id])
  studentProgress StudentProgress[]

  @@index([courseId])
}

model StudentProgress {
  id          String   @id @default(uuid())
  studentId   String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  Student     Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, chapterId])
  @@index([chapterId])
}

enum Type {
  ADMIN
  TEACHER
  STUDENT
}

model GlobalSettings {
  id   String  @id @default(uuid())
  logo String?
  copy String?
}

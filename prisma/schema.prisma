// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the "Session" model
model Session {
  sid    String   @id @db.VarChar(255)
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)
}

// user.model.prisma

model User {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?  @unique
  imageUrl  String?
  email     String   @unique
  password  String
  type      Type

  tokens Token[]
}

enum Type {
  ADMIN
  TEACHER
  STUDENT
}

// admin.model.prisma

model Admin {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?  @unique
  imageUrl  String?
  email     String   @unique
  password  String
  role      String   @default("viewer")
  verified  Boolean  @default(false)
  // Add other admin details as needed

  // Relationship with Teacher
  teachers Teacher[]
}

// teacher.model.prisma

model Teacher {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?  @unique
  imageUrl  String?
  firstName String?
  lastName  String?
  bio       String?
  email     String   @unique
  password  String
  verified  Boolean  @default(false)

  verifiedTeacher Boolean @default(false)
  // Add other teacher details as needed

  // Relationship with Admin
  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  // Relationship with Course
  courses Course[]
}

// student.model.prisma

model Student {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?  @unique
  imageUrl  String?
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  // Add other student details as needed

  // Relationship with Course
  enrolledCourses Course[]

  progress StudentProgress[]
  Chapter  Chapter[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailToken String? @unique

  valid      Boolean  @default(true)
  expiration DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

// course.model.prisma

model Course {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  banner    String?
  type      String // e.g., Beginner, Intermediate, Advanced
  limit     Int // Max number of participants allowed in the course
  view      String   @default("basic") // Added field for course view
  price     Int
  // Add other course details as needed

  // Relationship with Teacher
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]

  // Relationship with Student
  participants Student[]
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  @@index([courseId])
}

model StudentProgress {
  id        String @id @default(uuid())
  studentId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, chapterId])
  @@index([chapterId])
}
